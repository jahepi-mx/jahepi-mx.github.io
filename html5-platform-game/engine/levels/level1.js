function Level1() {
    this.loaded = false;
    this.startX = Config.tileSize * 7 - Config.worldWidth / 2 + Config.heroSize / 2;
    this.startY = Config.tileSize * 14  - Config.worldHeight / 2 - Config.heroSize / 2;
}

Level1.prototype.setup = function(camera) {
    
    this.mapWidth = 300;
    this.mapHeight = 20;
    this.camera = camera;
    this.camera.height = 4;
    this.tiles = [];
    this.enemies = [];
    this.platforms = [];
    this.totalNumberOfCoins = 71;
    this.music = Assets.playAudio(Assets.level1_music, true);
    this.atlasBackground = Atlas.tiles.cave_background;
    this.visibilityEnemyRatioX = 30; // 30 tiles 
    this.visibilityEnemyRatioY = 20; // 20 tiles
    this.checkpointTime = 0;
    this.checkpointTimeLimit = 2;
    this.isCheckpoint = false;
    
    if (!this.loaded) {
        this.coins = [];
    }
    this.map = [
        97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 102, 102, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 97, 98, 67, 67, 67, 41, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 0, 0, 106, 0, 0, 106, 0, 0, 105, 106, 0, 105, 102, 102, 102, 102, 102, 102, 105, 104, 0, 0, 0, 0, 0, 0, 103, 102, 106, 0, 0, 0, 0, 0, 0, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 97, 98, 67, 67, 67, 41, 42, 42, 49, 49, 41, 49, 49, 40, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 42, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 0, 0, 106, 0, 0, 106, 0, 0, 105, 102, 105, 102, 102, 102, 102, 102, 102, 102, 102, 104, 0, 0, 0, 0, 0, 0, 103, 102, 106, 0, 0, 0, 0, 0, 0, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 97, 98, 49, 42, 42, 42, 42, 42, 40, 42, 49, 49, 49, 49, 49, 49, 49, 40, 42, 49, 49, 49, 49, 49, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 40, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 0, 0, 106, 0, 0, 106, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 104, 0, 0, 0, 0, 0, 0, 103, 102, 106, 0, 0, 0, 0, 0, 0, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 102, 106, 40, 42, 42, 42, 41, 42, 42, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 41, 42, 42, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 40, 41, 41, 49, 49, 49, 49, 49, 49, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 42, 49, 49, 49, 41, 42, 42, 49, 49, 49, 41, 49, 49, 41, 42, 49, 49, 49, 49, 49, 40, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 42, 49, 49, 42, 49, 49, 49, 49, 41, 42, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 102, 102, 102, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 104, 0, 0, 0, 0, 0, 0, 103, 102, 106, 0, 0, 0, 0, 0, 0, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 67, 40, 41, 67, 42, 41, 42, 42, 49, 42, 49, 49, 49, 42, 49, 49, 49, 49, 49, 40, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 93, 94, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 42, 49, 49, 49, 42, 49, 42, 49, 49, 49, 49, 49, 49, 49, 41, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 42, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 40, 42, 49, 42, 49, 49, 49, 49, 49, 40, 67, 67, 67, 67, 67, 67, 67, 67, 67, 102, 102, 102, 102, 104, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 42, 49, 49, 41, 42, 49, 49, 49, 49, 42, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 106, 0, 103, 102, 102, 102, 102, 105, 104, 0, 0, 0, 0, 0, 0, 103, 102, 106, 0, 0, 0, 0, 0, 0, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 97, 98, 49, 67, 67, 41, 41, 42, 40, 42, 49, 49, 49, 42, 49, 40, 49, 49, 49, 49, 41, 42, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 95, 96, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 41, 42, 42, 42, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 40, 42, 49, 49, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 102, 102, 102, 104, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 49, 42, 42, 42, 49, 49, 42, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 103, 104, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 106, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 102, 102, 102, 102, 105, 102, 102, 102, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 103, 97, 98, 41, 67, 67, 67, 42, 42, 49, 49, 49, 40, 42, 42, 49, 41, 49, 40, 42, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 42, 42, 49, 42, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 42, 42, 41, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 41, 41, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 40, 41, 42, 49, 49, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 102, 102, 102, 102, 104, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 42, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 102, 102, 97, 98, 102, 102, 102, 97, 98, 102, 102, 97, 98, 97, 98, 97, 98, 97, 98, 39, 102, 102, 102, 102, 102, 102, 104, 0, 0, 0, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 102, 102, 102, 102, 105, 102, 102, 102, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 97, 98, 49, 67, 67, 67, 67, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 40, 49, 49, 49, 49, 42, 49, 49, 39, 67, 49, 49, 49, 49, 49, 67, 49, 49, 49, 49, 49, 67, 49, 49, 49, 49, 49, 67, 39, 49, 42, 42, 49, 49, 49, 49, 42, 49, 42, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 41, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 42, 42, 49, 49, 49, 49, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 42, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 102, 106, 38, 105, 102, 102, 102, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 0, 106, 0, 103, 102, 0, 102, 0, 104, 0, 103, 102, 102, 93, 94, 102, 102, 93, 94, 102, 102, 93, 94, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 97, 98, 41, 67, 67, 67, 67, 67, 49, 49, 49, 42, 49, 49, 49, 49, 49, 42, 49, 49, 40, 49, 49, 49, 49, 41, 42, 49, 38, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 38, 49, 49, 42, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 49, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 42, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 49, 49, 67, 49, 67, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 102, 102, 102, 104, 67, 67, 67, 67, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 103, 104, 0, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 106, 38, 105, 102, 102, 103, 104, 67, 97, 98, 97, 98, 97, 98, 97, 98, 105, 97, 98, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 95, 96, 102, 102, 95, 96, 102, 102, 95, 96, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 97, 98, 41, 67, 67, 67, 67, 67, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 40, 41, 41, 49, 42, 49, 49, 42, 49, 38, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 38, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 42, 49, 49, 49, 49, 49, 49, 49, 67, 49, 49, 49, 49, 49, 67, 49, 49, 49, 49, 49, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 102, 102, 104, 67, 67, 67, 41, 42, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 49, 49, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 106, 38, 105, 102, 102, 105, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 97, 98, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 106, 67, 101, 67, 67, 101, 67, 67, 67, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67, 67, 67, 97, 98, 103, 102, 102, 102, 102, 102, 102, 102, 102, 105, 106, 67, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 42, 41, 67, 49, 49, 42, 49, 49, 49, 49, 49, 49, 49, 38, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 38, 49, 49, 49, 49, 49, 49, 49, 49, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 93, 94, 49, 49, 49, 93, 94, 49, 49, 49, 93, 94, 49, 49, 49, 49, 49, 49, 49, 49, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 102, 102, 67, 67, 67, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 42, 42, 49, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 103, 104, 0, 0, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 106, 38, 105, 102, 102, 103, 104, 67, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 97, 98, 102, 102, 102, 102, 102, 102, 106, 67, 67, 67, 67, 67, 67, 67, 67, 67, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 67, 67, 67, 97, 98, 97, 98, 103, 102, 102, 102, 102, 102, 102, 105, 97, 98, 41, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 41, 42, 67, 67, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 38, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 38, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 95, 96, 49, 49, 49, 95, 96, 49, 49, 49, 95, 96, 49, 49, 49, 49, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 104, 104, 40, 41, 42, 49, 0, 0, 49, 49, 0, 0, 49, 49, 0, 0, 49, 49, 0, 0, 49, 49, 0, 0, 49, 49, 41, 42, 42, 42, 49, 49, 49, 49, 41, 42, 42, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 104, 0, 0, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 106, 38, 105, 102, 102, 102, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 97, 98, 104, 102, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 103, 102, 102, 102, 102, 103, 97, 98, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 42, 42, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 49, 38, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 38, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 101, 101, 101, 97, 98, 101, 101, 101, 97, 98, 101, 101, 101, 97, 98, 67, 49, 49, 67, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 103, 102, 102, 102, 104, 40, 41, 42, 49, 0, 0, 49, 49, 0, 0, 49, 49, 0, 0, 49, 49, 0, 0, 49, 49, 0, 0, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 105, 106, 38, 105, 102, 102, 102, 97, 66, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 103, 102, 102, 102, 102, 105, 97, 98, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 102, 102, 102, 104, 40, 41, 42, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 105, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 106, 38, 105, 102, 102, 102, 97, 66, 97, 98, 97, 98, 97, 98, 97, 98, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 103, 102, 105, 103, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 97, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 102, 104, 104, 40, 41, 42, 49, 97, 98, 49, 49, 97, 98, 49, 49, 97, 98, 49, 49, 97, 98, 49, 49, 97, 98, 49, 49, 49, 49, 97, 98, 49, 49, 67, 49, 49, 49, 49, 49, 49, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 100, 67, 100, 67, 97, 98, 97, 98, 97, 98, 97, 98, 100, 100, 100, 100, 97, 66, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 99, 99, 99, 99, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 100, 100, 100, 100, 67, 100, 100, 100, 100, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 81, 67, 81, 67, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 97, 66, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 81, 81, 81, 81, 81, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 81, 67, 81, 67, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 97, 66, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 81, 81, 81, 81, 81, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 97, 66, 97, 98, 97, 98, 97, 98, 97, 98, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 66, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 97, 98, 67, 67, 67, 67, 67, 67, 67, 67, 67, 97, 98, 97, 98, 97, 98
    ];
    
    for (var i = 0; i < this.map.length; i++) {
        if (this.map[i] === 0) {
            this.tiles[i] = null;
        } else {
            this.tiles[i] = new Tile(i % this.mapWidth, Math.floor(i / this.mapWidth), Config.tileSize, Config.tileSize, this.map[i], this.camera);
        }
        this.enemies[i] = null;
        if (!this.loaded) {
            this.coins[i] = null;
        }
    }
    
    this.enemies[15 * this.mapWidth + 16] = new StaticEnemy(16, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 18] = new StaticEnemy(18, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 28] = new StaticEnemy(28, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 29] = new StaticEnemy(29, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 30] = new StaticEnemy(30, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 31] = new StaticEnemy(31, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 42] = new StaticEnemy(42, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 43] = new StaticEnemy(43, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 44] = new StaticEnemy(44, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 45] = new StaticEnemy(45, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 46] = new StaticEnemy(46, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 47] = new StaticEnemy(47, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 48] = new StaticEnemy(48, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 49] = new StaticEnemy(49, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 50] = new StaticEnemy(50, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 51] = new StaticEnemy(51, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 52] = new StaticEnemy(52, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 53] = new StaticEnemy(53, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 54] = new StaticEnemy(54, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[14 * this.mapWidth + 55] = new StaticEnemy(55, 14, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 128] = new StaticEnemy(128, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 129] = new StaticEnemy(129, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 130] = new StaticEnemy(130, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 131] = new StaticEnemy(131, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 132] = new StaticEnemy(132, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 133] = new StaticEnemy(133, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 134] = new StaticEnemy(134, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 135] = new StaticEnemy(135, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 136] = new StaticEnemy(136, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 137] = new StaticEnemy(137, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 138] = new StaticEnemy(138, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 139] = new StaticEnemy(139, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 140] = new StaticEnemy(140, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 141] = new StaticEnemy(141, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 142] = new StaticEnemy(142, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 143] = new StaticEnemy(143, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 144] = new StaticEnemy(144, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 145] = new StaticEnemy(145, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[13 * this.mapWidth + 146] = new StaticEnemy(146, 13, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 285] = new StaticEnemy(285, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 286] = new StaticEnemy(286, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 287] = new StaticEnemy(287, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 288] = new StaticEnemy(288, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 290] = new StaticEnemy(290, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 291] = new StaticEnemy(291, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 292] = new StaticEnemy(292, 15, this.camera, StaticEnemy.FIRE_TYPE);
    this.enemies[15 * this.mapWidth + 293] = new StaticEnemy(293, 15, this.camera, StaticEnemy.FIRE_TYPE);
    
    this.enemies[10 * this.mapWidth + 61] = new StaticEnemy(61, 10, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[10 * this.mapWidth + 64] = new StaticEnemy(64, 10, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 163] = new StaticEnemy(163, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 164] = new StaticEnemy(164, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 165] = new StaticEnemy(165, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 168] = new StaticEnemy(168, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 169] = new StaticEnemy(169, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 170] = new StaticEnemy(170, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 173] = new StaticEnemy(173, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 174] = new StaticEnemy(174, 12, this.camera, StaticEnemy.BUOY_TYPE);
    this.enemies[12 * this.mapWidth + 175] = new StaticEnemy(175, 12, this.camera, StaticEnemy.BUOY_TYPE);
    for (var x = 179; x <= 211; x++) {
        this.enemies[13 * this.mapWidth + x] = new StaticEnemy(x, 13, this.camera, StaticEnemy.BUOY_TYPE);
    }
    
    this.enemies[15 * this.mapWidth + 95] = new StaticEnemy(95, 15, this.camera, StaticEnemy.STING_DARK_TYPE);
    this.enemies[15 * this.mapWidth + 96] = new StaticEnemy(96, 15, this.camera, StaticEnemy.STING_DARK_TYPE);
    this.enemies[15 * this.mapWidth + 97] = new StaticEnemy(97, 15, this.camera, StaticEnemy.STING_DARK_TYPE);
    this.enemies[15 * this.mapWidth + 98] = new StaticEnemy(98, 15, this.camera, StaticEnemy.STING_DARK_TYPE);
    for (var x = 68; x <= 83; x++) {
        this.enemies[11 * this.mapWidth + x] = new StaticEnemy(x, 11, this.camera, StaticEnemy.STING_DARK_TYPE);
    }
    
    //this.enemies[13 * this.mapWidth + 16] = new FlyDemonEnemy(16, 13, Config.tileSize, Config.tileSize, 100, 50, 3, Config.tileSize * 2, this.camera);
    //this.enemies[13 * this.mapWidth + 16] = new BeetleEnemy(16, 13, Config.tileSize, Config.tileSize, BeetleEnemy.VERTICAL, 100, Config.tileSize * 2, this.camera);
    //this.enemies[13 * this.mapWidth + 16] = new BuoyEnemy(16, 13, Config.tileSize, Config.tileSize, 100, 100, Config.tileSize * 2, 2, this.camera);
    //this.enemies[13 * this.mapWidth + 16] = new BuoyEnemy360(16, 13, Config.tileSize, Config.tileSize, 90, Config.tileSize * 2, this.camera);
    //this.enemies[13 * this.mapWidth + 16] = new ZombieEnemy(16, 13, Config.tileSize, Config.tileSize, 100, Config.tileSize * 2, 3, this.camera);
    //this.enemies[13 * this.mapWidth + 16] = new SpiderEnemy(16, 13, Config.tileSize, Config.tileSize, 100, 100, Config.tileSize * 2, Config.tileSize, 2, this.camera);
    //this.enemies[13 * this.mapWidth + 16] = new SkeletonEnemy(16, 13, Config.tileSize, Config.tileSize, 100, Config.tileSize * 2, 2, this.camera);
    
    this.enemies[6 * this.mapWidth + 19] = new BeetleEnemy(19, 6, Config.tileSize * 0.9, Config.tileSize * 0.9, BeetleEnemy.HORIZONTAL, 100, Config.tileSize * 7, this.camera);
    this.enemies[9 * this.mapWidth + 48] = new BeetleEnemy(48, 9, Config.tileSize, Config.tileSize, BeetleEnemy.VERTICAL, 100, Config.tileSize * 3, this.camera);
    this.enemies[10 * this.mapWidth + 51] = new BeetleEnemy(51, 10, Config.tileSize, Config.tileSize, BeetleEnemy.VERTICAL, 200, Config.tileSize * 4, this.camera);
    this.enemies[8 * this.mapWidth + 68] = new FlyDemonEnemy(68, 8, Config.tileSize * 1.2, Config.tileSize * 1.2, 300, 50, 4, Config.tileSize * 15, this.camera);
    this.enemies[13 * this.mapWidth + 103] = new FlyDemonEnemy(103, 13, Config.tileSize, Config.tileSize, 200, 30, 5, Config.tileSize * 8, this.camera);
    this.enemies[10 * this.mapWidth + 118] = new FlyDemonEnemy(118, 10, Config.tileSize * 1.5, Config.tileSize * 1.5, 150, Config.tileSize, 8, Config.tileSize * 8, this.camera);
    this.enemies[11 * this.mapWidth + 149] = new BeetleEnemy(149, 11, Config.tileSize * 0.8, Config.tileSize * 0.8, BeetleEnemy.HORIZONTAL, 100, Config.tileSize * 13, this.camera);
    this.enemies[11 * this.mapWidth + 150] = new BeetleEnemy(150, 11, Config.tileSize * 0.6, Config.tileSize * 0.6, BeetleEnemy.HORIZONTAL, 200, Config.tileSize * 10, this.camera);
    this.enemies[11 * this.mapWidth + 151] = new BeetleEnemy(151, 11, Config.tileSize * 0.9, Config.tileSize * 0.9, BeetleEnemy.HORIZONTAL, 50, Config.tileSize * 6, this.camera);
    this.enemies[11 * this.mapWidth + 167] = new BeetleEnemy(167, 11, Config.tileSize, Config.tileSize, BeetleEnemy.VERTICAL, 100, Config.tileSize * 4, this.camera);
    this.enemies[11 * this.mapWidth + 172] = new BeetleEnemy(172, 11, Config.tileSize, Config.tileSize, BeetleEnemy.VERTICAL, 150, Config.tileSize * 4, this.camera);
    this.enemies[11 * this.mapWidth + 176] = new BeetleEnemy(176, 11, Config.tileSize, Config.tileSize, BeetleEnemy.VERTICAL, 200, Config.tileSize * 4, this.camera);
    this.enemies[5 * this.mapWidth + 231] = new BeetleEnemy(231, 5, Config.tileSize * 0.8, Config.tileSize * 0.8, BeetleEnemy.HORIZONTAL, 50, Config.tileSize * 2, this.camera);
    this.enemies[13 * this.mapWidth + 261] = new ZombieEnemy(261, 13, Config.tileSize * 1.2, Config.tileSize * 1.2, 50, Config.tileSize, 10, this.camera);
    this.enemies[13 * this.mapWidth + 265] = new ZombieEnemy(265, 13, Config.tileSize * 1.2, Config.tileSize * 1.2, 50, Config.tileSize, 10, this.camera);
    this.enemies[13 * this.mapWidth + 269] = new ZombieEnemy(269, 13, Config.tileSize * 1.2, Config.tileSize * 1.2, 50, Config.tileSize, 10, this.camera);
    this.enemies[13 * this.mapWidth + 273] = new ZombieEnemy(273, 13, Config.tileSize * 1.2, Config.tileSize * 1.2, 50, Config.tileSize, 10, this.camera);
    
    this.platforms[0] = new MovingPlatform(68.5, 10, Config.tileSize * 2, Config.tileSize * 0.8, MovingPlatform.HORIZONTAL, 150, Config.tileSize * 13, this.camera);
    this.platforms[1] = new MovingPlatform(96.5, 14, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.VERTICAL, 150, Config.tileSize * 11, this.camera);
    this.platforms[2] = new MovingPlatform(130, 7, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.HORIZONTAL, 50, Config.tileSize * 2, this.camera);
    this.platforms[3] = new MovingPlatform(136, 7, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.HORIZONTAL, 100, Config.tileSize * 2, this.camera);
    this.platforms[4] = new MovingPlatform(142, 7, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.HORIZONTAL, 150, Config.tileSize * 2, this.camera);
    this.platforms[5] = new MovingPlatform(184, 12, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.VERTICAL, 100, Config.tileSize * 3, this.camera);
    this.platforms[6] = new MovingPlatform(188, 11, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.VERTICAL, 100, Config.tileSize * 3, this.camera);
    this.platforms[7] = new MovingPlatform(192, 9, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.HORIZONTAL, 150, Config.tileSize * 2, this.camera);
    this.platforms[8] = new MovingPlatform(198, 9, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.HORIZONTAL, 150, Config.tileSize * 2, this.camera);
    this.platforms[9] = new MovingPlatform(204, 10, Config.tileSize, Config.tileSize * 0.8, MovingPlatform.VERTICAL, 100, Config.tileSize * 3, this.camera);
    
    if (!this.loaded) {
        this.currentNumberOfCoins = 0;
        this.coins[14 * this.mapWidth + 17] = new Coin(17, 14, this.camera);
        this.coins[6 * this.mapWidth + 4] = new Coin(4, 6, this.camera);
        this.coins[6 * this.mapWidth + 5] = new Coin(5, 6, this.camera);
        this.coins[6 * this.mapWidth + 10] = new Coin(10, 6, this.camera);
        this.coins[6 * this.mapWidth + 11] = new Coin(11, 6, this.camera);
        this.coins[6 * this.mapWidth + 15] = new Coin(15, 6, this.camera);
        this.coins[6 * this.mapWidth + 16] = new Coin(16, 6, this.camera);
        this.coins[9 * this.mapWidth + 32] = new Coin(32, 9, this.camera);
        this.coins[11 * this.mapWidth + 32] = new Coin(32, 11, this.camera);
        this.coins[8 * this.mapWidth + 43] = new Coin(43, 8, this.camera);
        this.coins[8 * this.mapWidth + 44] = new Coin(44, 8, this.camera);
        this.coins[9 * this.mapWidth + 47] = new Coin(47, 9, this.camera);
        this.coins[9 * this.mapWidth + 48] = new Coin(48, 9, this.camera);
        this.coins[10 * this.mapWidth + 50] = new Coin(50, 10, this.camera);
        this.coins[10 * this.mapWidth + 51] = new Coin(51, 10, this.camera);
        this.coins[11 * this.mapWidth + 54] = new Coin(54, 11, this.camera);
        this.coins[11 * this.mapWidth + 55] = new Coin(55, 11, this.camera);
        this.coins[8 * this.mapWidth + 70] = new Coin(70, 8, this.camera);
        this.coins[8 * this.mapWidth + 71] = new Coin(71, 8, this.camera);
        this.coins[8 * this.mapWidth + 74] = new Coin(74, 8, this.camera);
        this.coins[8 * this.mapWidth + 75] = new Coin(75, 8, this.camera);
        this.coins[8 * this.mapWidth + 78] = new Coin(78, 8, this.camera);
        this.coins[8 * this.mapWidth + 79] = new Coin(79, 8, this.camera);
        this.coins[10 * this.mapWidth + 99] = new Coin(99, 10, this.camera);
        for (var y = 12; y >= 2; y--) {
            this.coins[y * this.mapWidth + 97] = new Coin(97, y, this.camera);
        }
        for (var y = 5; y <= 13; y++) {
            this.coins[y * this.mapWidth + 101] = new Coin(101, y, this.camera);
        }
        this.coins[9 * this.mapWidth + 108] = new Coin(108, 9, this.camera);
        this.coins[9 * this.mapWidth + 109] = new Coin(109, 9, this.camera);
        this.coins[9 * this.mapWidth + 110] = new Coin(110, 9, this.camera);
        this.coins[9 * this.mapWidth + 111] = new Coin(111, 9, this.camera);
        this.coins[9 * this.mapWidth + 112] = new Coin(112, 9, this.camera);
        this.coins[9 * this.mapWidth + 113] = new Coin(113, 9, this.camera);
        this.coins[5 * this.mapWidth + 131] = new Coin(131, 5, this.camera);
        this.coins[5 * this.mapWidth + 137] = new Coin(137, 5, this.camera);
        this.coins[5 * this.mapWidth + 143] = new Coin(143, 5, this.camera);
        this.coins[10 * this.mapWidth + 166] = new Coin(166, 10, this.camera);
        this.coins[10 * this.mapWidth + 167] = new Coin(167, 10, this.camera);
        this.coins[10 * this.mapWidth + 171] = new Coin(171, 10, this.camera);
        this.coins[10 * this.mapWidth + 172] = new Coin(172, 10, this.camera);
        this.coins[10 * this.mapWidth + 176] = new Coin(176, 10, this.camera);
        this.coins[10 * this.mapWidth + 177] = new Coin(177, 10, this.camera);
        this.coins[8 * this.mapWidth + 188] = new Coin(188, 8, this.camera);
        this.coins[7 * this.mapWidth + 193] = new Coin(193, 7, this.camera);
        this.coins[7 * this.mapWidth + 199] = new Coin(199, 7, this.camera);
        this.coins[14 * this.mapWidth + 263] = new Coin(263, 14, this.camera);
        this.coins[14 * this.mapWidth + 264] = new Coin(264, 14, this.camera);
        this.coins[14 * this.mapWidth + 267] = new Coin(267, 14, this.camera);
        this.coins[14 * this.mapWidth + 268] = new Coin(268, 14, this.camera);
        this.coins[14 * this.mapWidth + 271] = new Coin(271, 14, this.camera);
        this.coins[14 * this.mapWidth + 272] = new Coin(272, 14, this.camera);
        this.coins[14 * this.mapWidth + 275] = new Coin(275, 14, this.camera);
        this.coins[14 * this.mapWidth + 276] = new Coin(276, 14, this.camera);
        this.coins[14 * this.mapWidth + 289] = new Coin(289, 14, this.camera);
    }
    this.loaded = true;
    this.levelName = "Level 1: Catacumbs / Coins Left " + (this.totalNumberOfCoins - this.currentNumberOfCoins);
};

Level1.prototype.dispose = function(all) {
    if (this.loaded) {
        if (all) {
            this.loaded = false;
            this.coins = null;
        }
        this.enemies = null;
        this.tiles = null;
        try {
            if (this.music !== null) {
                this.music.stop();
            }
        } catch (e) {}
        this.music = null;
    }
};

Level1.prototype.checkpoint = function(deltatime) {
    var tileX = (this.camera.x + Config.worldWidth / 2 - Config.heroSize / 2) / Config.tileSize;
    var tileY = (this.camera.y + Config.worldHeight / 2 + Config.heroSize / 2) / Config.tileSize;
    
    if (this.isCheckpoint) {
        this.checkpointTime += deltatime;
        if (this.checkpointTime >= this.checkpointTimeLimit) {
            this.isCheckpoint = false;
            this.checkpointTime = 0;
        }
    }
    
    if (tileX >= 25 && tileX <= 26 && tileY >= 13 && tileY <= 15) {
        this.isCheckpoint = true;
        this.startX = Config.tileSize * 25 - Config.worldWidth / 2 + Config.heroSize / 2;
        this.startY = Config.tileSize * 14 - Config.worldHeight / 2 - Config.heroSize / 2;
    } else if (tileX >= 40 && tileX <= 41 && tileY >= 6 && tileY <= 8) {
        this.isCheckpoint = true;
        this.startX = Config.tileSize * 40 - Config.worldWidth / 2 + Config.heroSize / 2;
        this.startY = Config.tileSize * 7 - Config.worldHeight / 2 - Config.heroSize / 2;
    } else if (tileX >= 66 && tileX <= 67 && tileY >= 8 && tileY <= 10) {
        this.isCheckpoint = true;
        this.startX = Config.tileSize * 66 - Config.worldWidth / 2 + Config.heroSize / 2;
        this.startY = Config.tileSize * 9 - Config.worldHeight / 2 - Config.heroSize / 2;
    } else if (tileX >= 86 && tileX <= 87 && tileY >= 8 && tileY <= 10) {
        this.isCheckpoint = true;
        this.startX = Config.tileSize * 86 - Config.worldWidth / 2 + Config.heroSize / 2;
        this.startY = Config.tileSize * 9 - Config.worldHeight / 2 - Config.heroSize / 2;
    } else if (tileX >= 125 && tileX <= 126 && tileY >= 10 && tileY <= 12) {
        this.isCheckpoint = true;
        this.startX = Config.tileSize * 125 - Config.worldWidth / 2 + Config.heroSize / 2;
        this.startY = Config.tileSize * 11 - Config.worldHeight / 2 - Config.heroSize / 2;
    } else if (tileX >= 178 && tileX <= 179 && tileY >= 10 && tileY <= 12) {
        this.isCheckpoint = true;
        this.startX = Config.tileSize * 178 - Config.worldWidth / 2 + Config.heroSize / 2;
        this.startY = Config.tileSize * 11 - Config.worldHeight / 2 - Config.heroSize / 2;
    } else if (tileX >= 214 && tileX <= 215 && tileY >= 7 && tileY <= 9) {
        this.isCheckpoint = true;
        this.startX = Config.tileSize * 214 - Config.worldWidth / 2 + Config.heroSize / 2;
        this.startY = Config.tileSize * 8 - Config.worldHeight / 2 - Config.heroSize / 2;
    }
};